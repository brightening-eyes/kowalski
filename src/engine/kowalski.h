/*
 Copyright (c) 2010-2013 Per Gantelius
 
 This software is provided 'as-is', without any express or implied
 warranty. In no event will the authors be held liable for any damages
 arising from the use of this software.
 
 Permission is granted to anyone to use this software for any purpose,
 including commercial applications, and to alter it and redistribute it
 freely, subject to the following restrictions:
 
 1. The origin of this software must not be misrepresented; you must not
 claim that you wrote the original software. If you use this software
 in a product, an acknowledgment in the product documentation would be
 appreciated but is not required.
 
 2. Altered source versions must be plainly marked as such, and must not be
 misrepresented as being the original software.
 
 3. This notice may not be removed or altered from any source
 distribution.
 */

#ifndef KWL__KOWALSKI_H
#define KWL__KOWALSKI_H

/*! \file
 This header defines the main portion of the public Kowalski Engine API.
 Language bindings are generated from this header file.
 See kowalski_ext.h for the DSP unit API.
 */

#ifdef __cplusplus
extern "C"
{
#endif /* __cplusplus */
    
    /************************************************************************/
    /**
     * @name Handles
     *  Handles representing common Kowalski objects.
     */
    /** @{ */
    
    /** A handle to a mix preset. */
    typedef int kwlMixPresetHandle;
    /** A handle to a mix bus. */
    typedef int kwlMixBusHandle;
    /** A handle to a specific event instance. */
    typedef int kwlEventHandle;
    /** A handle to an event definition. */
    typedef int kwlEventDefinitionHandle;
    /** A handle to a wave bank.*/
    typedef int kwlWaveBankHandle;
    
    /** @} */
    
    
    /************************************************************************/
    /**
     * @name Error codes
     *  Error codes generated by the Kowalski engine.
     */
    /** @{ */
    typedef enum
    {
        /** No error.*/
        KWL_NO_ERROR = 0,
        
        /** Indicates that a given mix bus handle does not correspond to a mix bus in the engine. */
        KWL_INVALID_MIX_BUS_HANDLE,
        /** Indicates that a given handle does not correspond to an event instance.*/
        KWL_INVALID_EVENT_INSTANCE_HANDLE,
        /** Indicates that a given handle does not correspond to an event definiton.*/
        KWL_INVALID_EVENT_DEFINITION_HANDLE,
        /** Indicates that a given mix preset handle does not correspond to a mix preset in the engine. */
        KWL_INVALID_MIX_PRESET_HANDLE,
        /** Indicates that all instances corresponding to a given event definition are in use. */
        KWL_NO_FREE_EVENT_INSTANCES,
        /** Indicates that a given wave bank handle does not correspond to a wave bank in the engine. */
        KWL_INVALID_WAVE_BANK_HANDLE,
        /** The given mix preset ID does not correspond to a mix preset in the engine. */
        KWL_UNKNOWN_MIX_PRESET_ID,
        /** The given event definition ID does not correspond to an event in the engine. */
        KWL_UNKNOWN_EVENT_DEFINITION_ID,
        /** The given mix bus ID does not correspond to a mix bus in the engine. */
        KWL_UNKNOWN_MIX_BUS_ID,
        /** Indicates that the engine is not initialized, but is required to be. */
        KWL_ENGINE_IS_NOT_INITIALIZED,
        /** Indicates that the engine is not in an uninitialized state, but is required to be. */
        KWL_ENGINE_ALREADY_INITIALIZED,
        /** A parameter is not in the prescribed range.*/
        KWL_INVALID_PARAMETER_VALUE,
        /** The file at the requested location could not be found. */
        KWL_FILE_NOT_FOUND,
        /** The format of a file cannot be recognized.*/
        KWL_UNKNOWN_FILE_FORMAT,
        /** Indicates that a given sample rate is unsupported by the engine.*/
        KWL_UNSUPPORTED_SAMPLE_RATE,
        /** Indicates that a given number of output channels is unsupported by the engine.*/
        KWL_UNSUPPORTED_NUM_OUTPUT_CHANNELS,
        /** Indicates that a given number of input channels is unsupported by the engine.*/
        KWL_UNSUPPORTED_NUM_INPUT_CHANNELS,
        /** Indicates that the non-audio engine data is not loaded, but is required to be.*/
        KWL_ENGINE_DATA_NOT_LOADED,
        /** Indicates that the non-audio engine data is loaded, but is required not to be.*/
        KWL_ENGINE_ALREADY_LOADED,
        /** An attempt to post a message to the mixer thread failed because the outgoing queue is full.*/
        KWL_MESSAGE_QUEUE_FULL,
        /** The wave bank id stored in a given wave bank binary file does
         not correspond to the id of a wave bank in the engine.*/
        KWL_NO_MATCHING_WAVE_BANK,
        /** There is not a one-to-one correspondence between the audio data entry ids in a
         wave bank binary file and the ids in the corresponding wave bank structure in the engine.*/
        KWL_WAVE_BANK_ENTRY_MISMATCH,
        /** The contents of a binary file is currupt.*/
        KWL_CORRUPT_BINARY_DATA,
        /** The data of a streaming event has an unsupported encoding.*/
        KWL_UNSUPPORTED_ENCODING,
        /** All decoder instances are in use. */
        KWL_NO_FREE_DECODERS,
        /** An audio level was queried but audio level metering is not enabled. */
        KWL_LEVEL_METERING_DISABLED,
        /** The event is not positional but is required to be.*/
        KWL_EVENT_IS_NOT_POSITIONAL,
        /** The event is positional but is required to be non-positional.*/
        KWL_EVENT_IS_NOT_NONPOSITIONAL,
        /** The positional freeform event cannot be created from a stereo file.*/
        KWL_POSITIONAL_EVENT_MUST_BE_MONO
    } kwlError;
    /** @} */
    
    /** An enumeration of supported positional audio distance attenuation models.*/
    typedef enum
    {
        /** The gain is proportional to the inverse distance between an event and the listener.*/
        KWL_INV_DISTANCE,
        /** The gain decays linearly with the distance between an event and the listener.*/
        KWL_LINEAR,
        /** The gain is constant and independent of the distance between an event and the listener.*/
        KWL_CONSTANT
    } kwlDistanceAttenuationModel;
    
    /** Valid types for freeform events, i.e events created in code. */
    typedef enum
    {
        /** The output of the event goes through positional audio processing. */
        KWL_POSITIONAL,
        /** The event is not positional.*/
        KWL_NONPOSITIONAL
    } kwlEventType;
    
    
    /** The value of invalid handles returned from the Kowalski engine.*/
    static const int KWL_INVALID_HANDLE = 0xffffffff;
    
    
    /************************************************************************/
    /**
     * @name Events
     * Functions for interacting with events.
     */
    /** @{ */
    
    /**
     * <p>Returns a handle to an instance of an event with a definition having a given ID.
     * The ID is of the form \c eventgroupID/.../eventID and describes the event hierarchy
     * path of the event definition in the Kowalski project data.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_UNKNOWN_EVENT_DEFINITION_ID if an event definition with the given ID cannot be found.</li>
     * <li>\c KWL_NO_FREE_EVENT_INSTANCES if all instances of the given event
     * definition are already associated with handles.</li>
     * </ul>
     * </p>
     * @param eventID The ID of the event definition.
     * @return The event handle to an event instance with the specified definition
     * or \c KWL_INVALID_HANDLE if an error occurred.
     * @see kwlEventRelease
     * @see kwlGetError
     */
    kwlEventHandle kwlEventGetHandle(const char* const eventID);
    
    /**
     * <p>Returns a handle to an event definition having a given ID.
     * The ID is of the form \c eventgroupID/.../eventID and describes the event hierarchy
     * path of the event definition in the Kowalski project data.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_UNKNOWN_EVENT_DEFINITION_ID if an event definition with the given ID cannot be found.</li>
     * </ul>
     * </p>
     * @param eventID The ID of the event definition.
     * @return A handle to the specified specified definition
     * or \c KWL_INVALID_HANDLE if an error occurred.
     * @see kwlEventStartOneShot
     * @see kwlEventStartOneShotAt
     * @see kwlGetError
     */
    kwlEventDefinitionHandle kwlEventDefinitionGetHandle(const char* const eventDefinitionID);
    
    /**
     * <p>Creates a freeform event from a given audio file. Events created using this function
     * exist in parallel with any loaded engine data and wave banks.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_FILE_NOT_FOUND if the specified audio file cannot be found.</li>
     * <li>\c KWL_UNKNOWN_FILE_FORMAT if the given file is of an unknown format.</li>
     * <li>\c KWL_UNSUPPORTED_ENCODING if audio file format is recognized but the encoding is unsupported.</li>
     * <li>\c KWL_POSITIONAL_EVENT_MUST_BE_MONO if the specified audio file is stereo and \c eventType is \c KWL_POSITIONAL.</li>
     * </ul>
     * </p>
     * @param audioFilePath The path of the audio file to create the event from.
     * @param eventType The type of event (positional or non-positional).
     * @param streamFromDisk Non-zero if the audio data should be streamed from disk, zero otherwise.
     * @return An event handle corresponding to the created event or \c KWL_INVALID_HANDLE if an error occurred.
     * @see kwlEventCreateWithBuffer
     * @see kwlEventGetHandle
     * @see kwlGetError
     */
    kwlEventHandle kwlEventCreateWithFile(const char* const audioFilePath, kwlEventType eventType, int streamFromDisk);
    
    /**
     * <p>Breaks the connection between a given event handle and the corresponding event instance.
     * If the event handle is associated with a freeform event created with \c kwlEventCreateWithFile or
     * \c kwlEventCreateWithBufer, its audio
     * data will get released. If the handle corresponds to a data driven event instance, it
     * is returned to the pool of free instances.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_EVENT_INSTANCE_HANDLE if the given event handle does not correspond to an event instance.</li>
     * </ul>
     * </p>
     * @param handle The event handle to release.
     * @see kwlEventGetHandle
     * @see kwlGetError
     */
    void kwlEventRelease(kwlEventHandle handle);
    
    /**
     * <p>Sets the pitch of an event instance corresponding to a given handle.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_EVENT_INSTANCE_HANDLE if the given event handle does not correspond to an event instance.</li>
     * <li>\c KWL_INVALID_PARAMETER_VALUE if \c pitch is negative.</li>
     * </ul>
     * </p>
     * @param handle An handle corresponding to the event instance to set the pitch of.
     * @param pitch The new pitch value. 1 is unit pitch.
     * @see kwlSetEventPitchSemitones
     * @see kwlGetError
     */
    void kwlEventSetPitch(kwlEventHandle handle, float pitch);
    
    /**
     * <p>Sets the user gain of an event instance corresponding to a given handle. The \c gain parameter
     * passed to this method is <strong>not</strong> a linear gain factor, but a parameter that gives an approximately
     * linear change in percieived loudness when changed linearly. A parameter value of 1 corresponds to
     * unit gain and a value of 0 to complete attenuation.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_EVENT_INSTANCE_HANDLE if the provided handle does not correspond to an event instance.</li>
     * <li>\c KWL_INVALID_PARAMETER_VALUE if \c gain is negative.</li>
     * </ul>
     * </p>
     * @param handle An event handle corresponding to the event to set the gain of.
     * @param gain The new gain value.
     * @see kwlEventSetLinearGain
     * @see kwlGetError
     */
    void kwlEventSetGain(kwlEventHandle handle, float gain);
    
    /**
     * <p>Sets the user gain of an event instance corresponding to a given handle. The \c gain parameter
     * passed to this method is a linear amplitude scale, where a value of 1 corresponds to
     * unit gain and a value of 0 to complete attenuation. Note that a linear change of the \c gain
     * parameter does <strong>not</strong> result in a linear change in perceived loudness (see \c kwlEventSetGain).</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_EVENT_INSTANCE_HANDLE if the provided handle does not correspond to an event instance.</li>
     * <li>\c KWL_INVALID_PARAMETER_VALUE if \c gain is negative.</li>
     * </ul>
     * </p>
     * @param handle An event handle corresponding to the event to set the gain of.
     * @param gain The gain value, given as a linear amplitude scale factor.
     * @see kwlEventSetGain
     * @see kwlGetError
     */
    void kwlEventSetLinearGain(kwlEventHandle handle, float gain);
    
    /**
     * <p>Sets the position in 3D space of a given event instance.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_EVENT_INSTANCE_HANDLE if the provided handle does not correspond to an event instance.</li>
     * <li>\c KWL_EVENT_IS_NOT_POSITIONAL if the provided handle does not correspond to a positional event.</li>
     * </ul>
     * </p>
     * @param handle An event handle corresponding to the event to set the position of.
     * @param posX The x component of the position.
     * @param posY The y component of the position.
     * @param posZ The z component of the position.
     * @see kwlEventSetVelocity
     * @see kwlEventSetOrientation
     * @see kwlGetError
     */
    void kwlEventSetPosition(kwlEventHandle handle, float posX, float posY, float posZ);
    
    /**
     * <p>Sets the velocity in 3D space of a given event instance.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_EVENT_INSTANCE_HANDLE if the provided handle does not correspond to an event instance.</li>
     * <li>\c KWL_EVENT_IS_NOT_POSITIONAL if the provided handle does not correspond to a positional event.</li>
     * </ul>
     * </p>
     * @param handle An event handle corresponding to the event to set the velocity of.
     * @param velX The x component of the velocity.
     * @param velY The y component of the velocity.
     * @param velZ The z component of the velocity.
     * @see kwlEventSetPosition
     * @see kwlEventSetOrientation
     * @see kwlGetError
     */
    void kwlEventSetVelocity(kwlEventHandle handle, float velX, float velY, float velZ);
    
    /**
     * <p>Sets the orientation in 3D space of a given event instance. The orientation
     * is specified as a vector in the facing, or forward, direction.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_EVENT_INSTANCE_HANDLE if the provided handle does not correspond to an event instance.</li>
     * <li>\c KWL_EVENT_IS_NOT_POSITIONAL if the provided handle does not correspond to a positional event.</li>
     * <li>\c KWL_INVALID_PARAMETER_VALUE if the orientation vector has a length of zero.</li>
     * </ul>
     * </p>
     * @param handle An event handle corresponding to the event to set the velocity of.
     * @param directionX The x component of the direction.
     * @param directionY The y component of the direction.
     * @param directionZ The z component of the direction.
     * @see kwlEventSetPosition
     * @see kwlEventSetVelocity
     * @see kwlGetError
     */
    void kwlEventSetOrientation(kwlEventHandle handle, float directionX, float directionY, float directionZ);
    
    /**
     * <p>Sets the stereo balance of a given event instance. For mono events, this amounts to panning and for
     * stereo events the levels of the right and left channels are adjusted individually.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_EVENT_INSTANCE_HANDLE if the provided handle does not correspond to an event instance.</li>
     * <li>\c KWL_EVENT_IS_POSITIONAL if the provided handle corresponds to a positional event.</li>
     * <li>\c KWL_INVALID_PARAMETER_VALUE if \c balance is greater than 1 or less than -1.</li>
     * </ul>
     * </p>
     * @param handle An event handle corresponding to the event to set the velocity of.
     * @param balance The new event balance, -1 is full left, 0 center and 1 full right.
     * @see kwlGetError
     */
    void kwlEventSetBalance(kwlEventHandle handle, float balance);
    
    /**
     * <p>Starts playback of a given event instance. If the instance is already playing, the behaviour
     * is defined by the retrigger mode of its event definition.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_EVENT_INSTANCE_HANDLE if the provided handle does not correspond to an event instance.</li>
     * </ul>
     * </p>
     * @param handle An event handle corresponding to the event to start.
     * @see kwlEventStartFade
     * @see kwlEventStop
     * @see kwlEventStopFade
     * @see kwlGetError
     */
    void kwlEventStart(kwlEventHandle handle);
    
    /**
     * <p>Starts playback of a free event instance (i.e an instance that is not associated with a handle)
     * belonging to a given event definition. If all free instances are playing, an instance
     * is stolen according to the event instance stealing mode of the event definition.
     * If this method is used to play a positional event, it is placed at the origin. To set the position of
     * positional events, use \c kwlEventStartOneShotAt.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_EVENT_DEFINITION_HANDLE if the provided handle does not correspond to an event definition.</li>
     * <li>\c KWL_NO_FREE_EVENT_INSTANCES if all instances of the given event definition are associated with handles.</li>
     * </ul>
     * </p>
     * @param handle An event definition handle corresponding to the event to start.
     * @see kwlEventStartOneShotAt
     * @see kwlGetError
     */
    void kwlEventStartOneShot(kwlEventDefinitionHandle handle);
    
    /**
     * <p>Starts playback of a free event instance (i.e an instance that is not associated with a handle)
     * belonging to a given event definition. If all free instances are playing, an instance
     * is stolen according to the event instance stealing mode of the event definition.
     * This method can only be used to play positional events. For non-positional one-shot playback,
     * use \c kwlEventStartOneShot.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_EVENT_DEFINITION_HANDLE if the provided handle does not correspond to an event definition.</li>
     * <li>\c KWL_NO_FREE_EVENT_INSTANCES if all instances of the given event definition are associated with handles.</li>
     * <li>\c KWL_EVENT_IS_NOT_POSITIONAL if the event definition is non-positional.</li>
     * </ul>
     * </p>
     * @param handle An event definition handle corresponding to the event to start.
     * @param x The x component of the playback position.
     * @param y The y component of the playback position.
     * @param z The z component of the playback position
     * @see kwlEventStartOneShot
     * @see kwlGetError
     */
    void kwlEventStartOneShotAt(kwlEventDefinitionHandle handle, float x, float y, float z);
    
    /**
     * <p>Starts playback of a given event instance, applying a fade in with a given duration.
     * If the instance is already playing, the behaviour is defined by the retrigger mode
     * of its event definition.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_EVENT_INSTANCE_HANDLE if the provided handle does not correspond to an event instance.</li>
     * <li>\c KWL_INVALID_PARAMETER_VALUE if \c fadeTime is negative.</li>
     * </ul>
     * </p>
     * @param handle An event handle corresponding to the event to start.
     * @param fadeTime The fade duration in seconds.
     * @see kwlEventStart
     * @see kwlEventStop
     * @see kwlEventStopFade
     * @see kwlGetError
     */
    void kwlEventStartFade(kwlEventHandle handle, float fadeTime);
    
    /**
     * <p>Stops playback of a given event instance. If the instance is not playing, this method does nothing.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_EVENT_INSTANCE_HANDLE if the provided handle does not correspond to an event instance.</li>
     * </ul>
     * </p>
     * @param handle An event handle corresponding to the event to start.
     * @see kwlEventStart
     * @see kwlEventStartFade
     * @see kwlEventStopFade
     * @see kwlGetError
     */
    void kwlEventStop(kwlEventHandle handle);
    
    /**
     * <p>Fades out an event instance over a given number of seconds and then stops it.
     * If the instance is not playing, this method does nothing.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_EVENT_INSTANCE_HANDLE if the provided handle does not correspond to an event instance.</li>
     * <li>\c KWL_INVALID_PARAMETER_VALUE if \c fadeTime is negative.</li>
     * </ul>
     * </p>
     * @param handle An event handle corresponding to the event to stop.
     * @param fadeTime The fade duration in seconds.
     * @see kwlEventStart
     * @see kwlEventStartFade
     * @see kwlEventStop
     * @see kwlGetError
     */
    void kwlEventStopFade(kwlEventHandle handle, float fadeTime);
    
    /**
     * <p>Pauses an event instance, suspending playback but leaving it active in the mixer.
     * If the instance is currently paused or not playing,
     * this method does nothing.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_EVENT_INSTANCE_HANDLE if the provided handle does not correspond to an event instance.</li>
     * </ul>
     * </p>
     * @param handle An event handle corresponding to the event to pause.
     * @see kwlEventResume
     * @see kwlGetError
     */
    void kwlEventPause(kwlEventHandle handle);
    
    /**
     * <p>Resumes playback of a paused event instance. If the instance is not paused,
     * this method does nothing.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_EVENT_INSTANCE_HANDLE if the provided handle does not correspond to an event instance.</li>
     * </ul>
     * </p>
     * @param handle An event handle corresponding to the event to resume.
     * @see kwlEventPause
     * @see kwlGetError
     */
    void kwlEventResume(kwlEventHandle handle);
    
    /**
     * <p>Checks if a given event instance is currently playing.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_EVENT_INSTANCE_HANDLE if the provided handle does not correspond to an event instance.</li>
     * </ul>
     * </p>
     * @param handle An event handle corresponding to the event to check.
     * @return A non-zero integer if the event instance is playing, zero otherwise.
     * @see kwlGetError
     */
    int kwlEventIsPlaying(kwlEventHandle handle);
    
    /** @} */
    
    /************************************************************************/
    /**
     * @name Mix bus
     *  Mix bus related functions.
     */
    /** @{ */
    /**
     * <p>Returns a handle representing a mix bus with a given ID.
     * The ID is simply the name of the mix bus.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_MIX_BUS_ID if there is no mix bus with the given ID.</li>
     * </ul>
     * </p>
     * @param busID The ID of the mix bus to get a handle to.
     * @return A handle to the mix bus with the given ID or \c KWL_INVALID_HANDLE if an error occured.
     * @see kwlGetError
     */
    kwlMixBusHandle kwlMixBusGetHandle(const char* const busID);
    
    /**
     * <p>Sets the user pitch of a given mix bus. The final pitch of the mix bus is
     * computed as the combination of the the mix preset pitch and the user pitch.</p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_MIX_BUS_HANDLE if the given handle does not correspond to a mix bus.</li>
     * <li>\c KWL_INVALID_PARAMETER_VALUE if \c pitch is negative.</li>
     * </ul>
     * </p>
     * @param handle A handle to the mix bus to set the pitch of.
     * @param pitch The new pitch.
     */
    void kwlMixBusSetPitch(kwlMixBusHandle handle, float pitch);
    
    /**
     * <p>Sets the user gain of a mix bus corresponding to a given handle. The \c gain parameter
     * passed to this method is <strong>not</strong> a linear gain factor, but a parameter that gives an approximately
     * linear change in percieived loudness when changed linearly. A parameter value of 1 corresponds to
     * unit gain and a value of 0 to complete attenuation.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_MIX_BUS_HANDLE if the provided handle does not correspond to an event instance.</li>
     * <li>\c KWL_INVALID_PARAMETER_VALUE if \c gain is negative.</li>
     * </ul>
     * </p>
     * @param handle A mix bus handle corresponding to the mix bus to set the gain of.
     * @param gain The new gain value.
     * @see kwlMixBusSetLinearGain
     * @see kwlGetError
     */
    void kwlMixBusSetGain(kwlMixBusHandle handle, float gain);
    
    /**
     * <p>Sets the user gain of a mix bus corresponding to a given handle. The \c gain parameter
     * passed to this method is a linear amplitude scale, where a value of 1 corresponds to
     * unit gain and a value of 0 to complete attenuation. Note that a linear change of the \c gain
     * parameter does <strong>not</strong> result in a linear change in perceived loudness (see \c kwlMixBusSetGain).</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_MIX_BUS_HANDLE if the provided handle does not correspond to a mix bus.</li>
     * <li>\c KWL_INVALID_PARAMETER_VALUE if \c gain is negative.</li>
     * </ul>
     * </p>
     * @param handle An event handle corresponding to the mix bus to set the gain of.
     * @param gain The gain value, given as a linear amplitude scale factor.
     * @see kwlMixBusSetGain
     * @see kwlGetError
     */
    void kwlMixBusSetLinearGain(kwlMixBusHandle handle, float gain);
    
    /** @} */
    
    /************************************************************************/
    /**
     * @name Mix presets
     *  Mix preset related functions.
     */
    /** @{ */
    /**
     * <p>
     * Returns a handle to a a mix preset with a given ID.
     * </p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_MIX_PRESET_ID if no mix preset has the provided ID.</li>
     * </ul>
     * </p>
     * @param presetId The ID of the preset to get a handle to
     * @return A handle to the mix preset or \c KWL_INVALID_HANDLE if an error occured.
     * @see kwlGetError
     */
    kwlMixPresetHandle kwlMixPresetGetHandle(const char* const presetId);
    
    /**
     * <p>Starts a crossfade towards a given mix preset. The crossfade duration is whatever
     * duration was read from the engine data. The crossfade is guaranteed to always be smooth,
     * even if this method is called mid-fade.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_MIX_PRESET_HANDLE if the provided handle does not correspond to a mix preset.</li>
     * </ul>
     * </p>
     * @param presetHandle A handle corresponding to the mix preset to fade to.
     * @see kwlMixPresetSet.
     * @see kwlGetError
     */
    void kwlMixPresetFadeTo(kwlMixPresetHandle presetHandle);
    
    /**
     * <p>Switches to a given mix preset directly without cross fading.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_MIX_PRESET_HANDLE if the provided handle does not correspond to a mix preset.</li>
     * </ul>
     * </p>
     * @param presetHandle A handle corresponding to the mix preset to switch to.
     * @see kwlMixPresetFadeTo.
     * @see kwlGetError
     */
    void kwlMixPresetSet(kwlMixPresetHandle presetHandle);
    
    /** @} */
    
    /************************************************************************/
    /**
     * @name Positional audio
     *  Positional audio related functions.
     */
    /** @{ */
    /**
     * <p>Sets the position in 3D space of the positional audio listener.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * </ul>
     * </p>
     * @param posX The position x component.
     * @param posY The position y component.
     * @param posZ The position z component.
     * @see kwlListenerSetVelocity
     * @see kwlListenerSetOrientation
     */
    void kwlListenerSetPosition(float posX, float posY, float posZ);
    
    /**
     * <p>Sets the velocity in 3D space of the positional audio listener.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * </ul>
     * </p>
     * @param velX The velocity x component.
     * @param velY The velocity y component.
     * @param velZ The velocity z component.
     * @see kwlListenerSetPosition
     * @see kwlListenerSetOrientation
     */
    void kwlListenerSetVelocity(float velX, float velY, float velZ);
    
    /**
     * <p>Sets the orientation in 3D space of the positional audio listener. The orientation is given
     * as one vector defining the direction, or facing, of the listener and one direction
     * defining the up direction of the listener.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_PARAMETER_VALUE if the length of the up or facing vectors is 0.</li>
     * </ul>
     * </p>
     * @param directionX The facing vector x component.
     * @param directionY The facing vector y component.
     * @param directionZ The facing vector z component.
     * @param upX The up vector x component.
     * @param upY The up vector y component.
     * @param upZ The up vector z component.
     * @see kwlListenerSetPosition
     * @see kwlListenerSetVelocity
     */
    void kwlListenerSetOrientation(float directionX, float directionY, float directionZ,
                                   float upX, float upY, float upZ);
    
    /**
     * <p>Sets listener cone attenuation parameters.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_PARAMETER_VALUE if \c innerConeAngle is negative or greater than 360.</li>
     * <li>\c KWL_INVALID_PARAMETER_VALUE if \c outerConeAngle is negative or greater than 360.</li>
     * <li>\c KWL_INVALID_PARAMETER_VALUE if \c innerConeAngle is greater than \c outerConeAngle.</li>
     * <li>\c KWL_INVALID_PARAMETER_VALUE if \c outerConeGain is negative.</li>
     * </ul>
     * @param innerConeAngle The inner cone angle in degrees.
     * @param outerConeAngle The outer cone angle in degrees.
     * @param outerConeGain The outer cone gain.
     * </p>
     */
    void kwlListenerSetConeParameters(float innerConeAngle, float outerConeAngle, float outerConeGain);
    
    /**
     * <p>Specifies a distance attenuation model to use for positional events.
     * The role of the model parameters \c rolloffFactor and \c referenceDistance
     * varies between different models. The gain is computed based on the distance \c d
     * between the event and the listener as follows
     * for the different models:
     * <ul>
     * <li>KWL_INV_DISTANCE: <code>gain = referenceDistance / (referenceDistance + rolloffFactor * (d – referenceDistance))</code></li>
     * <li>KWL_LINEAR: <code>gain = max(0, (1 – rolloffFactor * (d – referenceDistance) / (maxDistance – referenceDistance)))</code></li>
     * <li>KWL_CONSTANT: <code>gain = 1</code>.</li>
     * </ul>
     *</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_PARAMETER_VALUE if
     *  <ul>
     *    <li>\c rolloffFactor is less than zero </li>
     *    <li>\c referenceDistance is less than or equal to zero </li>
     *    <li>\c referenceDistance is greather than or equal to \c maxDistance and \c maxDistance is greater than 0.</li>
     *  </ul>
     * </li>
     * </ul>
     * </p>
     * @param type The distance attenuation model type.
     * @param clamp Some distance models may amplify an event at small distances. Setting this parameter to a non-zero
     value will prevent this from happening.
     * @param maxDistance Events further away than this from the listener will be inaudible. This parameter
     is ignored if its value is zero or less.
     * @param rolloffFactor A parameter with a model specific interpretation. Ignored if \c type is \c KWL_CONSTANT.
     * @param referenceDistance A parameter with a model specific interpretation. Ignored if \c type is \c KWL_CONSTANT.
     * @see kwlSetDopplerShiftParameters
     * @see kwlSetConeAttenuationEnabled
     */
    void kwlSetDistanceAttenuationModel(kwlDistanceAttenuationModel type,
                                        int clamp,
                                        float maxDistance,
                                        float rolloffFactor,
                                        float referenceDistance);
    /**
     * <p>Sets parameters affecting doppler shift, i.e velocity based changed in event pitch.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_PARAMETER_VALUE if \c speedOfSound is less than or equal to zero or
     *  doppler scale is less than zero or greater than one.</li>
     * </ul>
     * </p>
     * @param speedOfSound The speed of sound in meters/second (the speed of sound in air is approximately 340 m/s).
     * @param dopplerScale The amount of dopper shift. 0 bypasses doppler shift entirely and 1 means the
     * effect is fully applied.
     * @see kwlSetDistanceAttenuationModel
     * @see kwlSetConeAttenuationEnabled
     */
    void kwlSetDopplerShiftParameters(float speedOfSound, float dopplerScale);
    
    /**
     * Enables or disables cone attenuation for events and the listener.
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * </ul>
     * </p>
     * @param enableListenerCone A value of zero disables listener cone attenuation, all other values enable it.
     * @param enableEventCones A value of zero disables event cone attenuation, all other values enable it.
     * @see kwlSetDistanceAttenuationModel
     * @see kwlSetDopplerShiftParameters
     */
    void kwlSetConeAttenuationEnabled(int enableListenerCone, int enableEventCones);
    
    /** @} */
    
    /************************************************************************/
    /**
     * @name Approximate sample clock
     *
     */
    /** @{ */
    
    /**
     * <p>Returns the number of frames of audio mixed since the last call to this method.
     * The accuracy of the returned value depends on the engine buffer size
     * and this method is not meant to provide sample accurate values.
     * However, the value is based on the actual number of mixed samples and
     * thus functions as an approximate sample clock that is guaranteed not to
     * drift. This makes it useful for syncing tasks where high accuracy is not crucial,
     * for example syncing visuals to musical beats.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * </ul>
     * </p>
     * @return The number of frames of audio mixed since the mixer started.
     * @see kwlGetError()
     */
    unsigned int kwlGetNumFramesMixed();
    
    /** @} */
    
    /************************************************************************/
    /**
     * @name Wave bank
     *  Wave bank related functions.
     */
    /** @{ */
    /**
     * <p>Loads the audio data contained in a given wave bank file. If the given wave
     * bank is already loaded, all this method does is return a handle to the
     * wave bank without doing any actual loading.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_ENGINE_DATA_NOT_LOADED if no engine data is currently loaded.</li>
     * <li>\c KWL_FILE_NOT_FOUND if the given wave bank file could not be found.</li>
     * <li>\c KWL_UNKNOWN_FILE_FORMAT if the given file is not a Kowalski wave bank.</li>
     * <li>\c KWL_NO_MATCHING_WAVE_BANK if the wave bank ID stored in the wave bank file does
     * not correspond to the ID of a wave bank in the engine </li>
     * <li>\c KWL_WAVE_BANK_ENTRY_MISMATCH if there is not a one-to-one correspondence between the
     * audio data entryies in the wave bank file and the entries in the corresponding
     * wave bank structure in the engine.</li>
     * </ul>
     * </p>
     * @param fileName The path of the wave bank file to load.
     * @return A handle to the loaded wave bank or \c KWL_INVALID_HANDLE if an error occurred.
     * @see kwlWaveBankIsLoaded
     * @see kwlWaveBankUnload
     * @see kwlWaveBankUnloadBlocking
     * @see kwlGetError
     */
    kwlWaveBankHandle kwlWaveBankLoad(const char* const fileName);
    
    /**
     * <p>Unloads the audio data of a given wave bank. If the wave bank is not
     * loaded, this method does nothing. Any currently playing events
     * using audio data from the wave bank will be stopped prior to unloading the
     * wave bank, so it is safe to call this method at any point. This method
     * may return before the actual unloading takes place.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_ENGINE_DATA_NOT_LOADED if no engine data is currently loaded.</li>
     * <li>\c KWL_INVALID_WAVE_BANK_HANDLE if the given handle does not correspond to a wave bank.</li>
     * </ul>
     * </p>
     * @param handle A handle corresponding to the wave bank to unload.
     * @see kwlWaveBankIsLoaded
     * @see kwlWaveBankLoad
     * @see kwlWaveBankUnloadBlocking
     * @see kwlGetError
     */
    void kwlWaveBankUnload(kwlWaveBankHandle handle);
    
    /**
     * <p>Does exactly the same as kwlWaveBankUnload, but blocks until the wave bank
     * has been unloaded which means that by the time the method returns,
     * the wave bank is guaranteed to be unloaded. Note: This blocking behaviour may incur
     * a pause, as opposed to kwlWaveBankUnload.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_ENGINE_DATA_NOT_LOADED if no engine data is currently loaded.</li>
     * <li>\c KWL_INVALID_WAVE_BANK_HANDLE if the given handle does not correspond to a wave bank.</li>
     * </ul>
     * </p>
     * @param handle A handle corresponding to the wave bank to unload.
     * @see kwlWaveBankIsLoaded
     * @see kwlWaveBankLoad
     * @see kwlWaveBankUnload
     * @see kwlGetError
     */
    void kwlWaveBankUnloadBlocking(kwlWaveBankHandle handle);
    
    /**
     * <p>Checks if a given wave bank is currently loaded. Returns a non-zero integer if this
     * is the case, zero otherwise.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_ENGINE_DATA_NOT_LOADED if no engine data is currently loaded.</li>
     * <li>\c KWL_INVALID_WAVE_BANK_HANDLE if the given handle does not correspond to a wave bank.</li>
     * </ul>
     * </p>
     * @param handle A handle corresponding to the wave bank to check.
     * @return A non-zero integer if the wave bank is loaded, zero otherwise.
     * @see kwlWaveBankLoad
     * @see kwlWaveBankUnload
     * @see kwlWaveBankUnloadBlocking
     * @see kwlGetError
     */
    int kwlWaveBankIsLoaded(kwlWaveBankHandle handle);
    
    /**
     * <p>Checks if any of the audio items of a given wave bank are referenced
     * by any currently playing events.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_ENGINE_DATA_NOT_LOADED if no engine data is currently loaded.</li>
     * <li>\c KWL_INVALID_WAVE_BANK_HANDLE if the given handle does not correspond to a wave bank.</li>
     * </ul>
     * </p>
     * @param handle A handle corresponding to the wave bank to check.
     * @return A non-zero integer if one or more audio data items are currently being used, zero otherwise.
     */
    int kwlWaveBankIsReferencedByPlayingEvent(kwlWaveBankHandle handle);
    
    /** @} */
    
    /************************************************************************/
    /**
     * @name Engine
     *  Basic engine functionality.
     */
    /** @{ */
    /**
     * <p>Checks if the Kowalski Engine is initialized.</p>
     * @return A non-zero integer if the engine is intitialized, zero otherwise.
     * @see kwlDeinitialize
     * @see kwlInitialize
     * @see kwlGetError
     */
    int kwlIsEngineInitialized();
    
    /**
     * <p>Unloads any currently loaded engine data and wave banks and shuts
     * down the underlying sound system.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine is not initialized.</li>
     * </ul>
     * </p>
     * @see kwlInitialize
     * @see kwlIsEngineInitialized
     * @see kwlGetError
     */
    void kwlDeinitialize();
    
    /**
     * <p>Initializes the Kowalski Engine and starts up the underlying sound system.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_ALREADY_INITIALIZED if the Kowalski engine is already initialized.</li>
     * </ul>
     * </p>
     * @param sampleRate The desired sample rate in Hz.
     * @param numOutputChannels The desired number of output channels. 1 for mono, 2 for stereo.
     * @param numInputChannels The desired number of input channels. 1 for mono, 2 for stereo or 0 to
     * disable audio input.
     * @param bufferSize The desired buffer size in bytes.
     * @see kwlDeinitialize
     * @see kwlIsEngineInitialized
     * @see kwlGetError
     */
    void kwlInitialize(int sampleRate, int numOutputChannels, int numInputChannels, int bufferSize);
    
    /**
     * <p>Loads non-audio engine data from a given file. If engine data is already loaded, this
     * function does nothing.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_FILE_NOT_FOUND if the given engine data file cannot be found.</li>
     * <li>\c KWL_UNKNOWN_FILE_FORMAT if the given file is not a valid Kowalski engine data file.</li>
     * </ul>
     * </p>
     * @param path The engine data file to load.
     * @see kwlEngineDataUnload
     * @see kwlEngineDataIsLoaded
     * @see kwlGetError
     */
    void kwlEngineDataLoad(const char* const path);
    
    /**
     * <p>Unloads any currently loaded non-audio engine data and any loaded wave banks.
     * Any data driven event currently playing will be stopped prior to the unloading so
     * it is safe to call this function at any point. If no engine data is loaded, this function
     * does nothing.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * </ul>
     * </p>
     * @see kwlEngineDataLoad
     * @see kwlEngineDataIsLoaded
     * @see kwlGetError
     */
    void kwlEngineDataUnload(void);
    
    /**
     * <p>Checks if engine data is currently loaded.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * </ul>
     * </p>  
     * @return A non-zero integer if engine data is currently loaded, zero otherwise.
     * @see kwlEngineDataLoad 
     * @see kwlEngineDataUnload 
     * @see kwlGetError
     */
    int kwlEngineDataIsLoaded(void);
    
    /**
     * <p>Resume the Kowalski engine mixer. If the mixer is not paused, this method does nothing.<p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * </ul>
     * </p>
     * @see kwlMixerPause 
     * @see kwlGetError
     */
    void kwlMixerResume(void);
    
    /**
     * <p>Pauses the Kowalski engine mixer. If the mixer is already paused, this method does nothing.<p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * </ul>
     * </p>
     * @see kwlMixerResume 
     * @see kwlGetError
     */
    void kwlMixerPause(void);
    
    /**
     * <p>Enables or disables metering of the final output level. For performance reasons, metering is 
     * disabled by default. </p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * </ul>
     * </p>
     * @param enabled A non-zero value enables metering and a value of zero disables it.
     * @see kwlGetLevelLeft
     * @see kwlGetLevelRight
     * @see kwlGetError
     */
    void kwlLevelMeteringSetEnabled(int enabled);    
    
    /**
     * <p>Returns the peak level of the left output channel.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_LEVEL_METERING_DISABLED if level metering has not been enabled.</li>
     * </ul>
     * </p>
     * @return The ouput peak level in the range 0 - 1.
     * @see kwlLevelMeteringSetEnabled
     * @see kwlGetLevelRight
     * @see kwlGetError
     */
    float kwlGetLevelLeft(void);
    
    /**
     * <p>Returns the peak level of the right output channel.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_LEVEL_METERING_DISABLED if level metering has not been enabled.</li>
     * </ul>
     * </p>
     * @return The ouput peak level in the range 0 - 1.
     * @see kwlLevelMeteringSetEnabled
     * @see kwlGetLevelLeft
     * @see kwlGetError
     */
    float kwlGetLevelRight(void);
    
    /**
     * <p>Indicates if clipping has occured since the last call to this method, i.e if the
     * master output level exceeds the output headroom.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_LEVEL_METERING_DISABLED if level metering has not been enabled.</li>
     * </ul>
     * </p>
     * @return Non-zero if clipping has occured since the last call to this method, zero otherwise.
     * @see kwlLevelMeteringSetEnabled
     * @see kwlGetLevelLeft
     * @see kwlGetLevelRight
     * @see kwlGetError
     */
    int kwlHasClipped(void);
    
    /**
     * <p>Updates the state of the Kowalski engine. The responsiveness of the engine relies on this
     * method being called continually, typically 20-100 times per second.</p>
     * <p>
     * <strong>Error codes:</strong>
     * <ul>
     * <li>\c KWL_ENGINE_IS_NOT_INITIALIZED if the Kowalski engine has not been initialized.</li>
     * <li>\c KWL_INVALID_PARAMETER_VALUE If the provided time step is negative.</li>
     * </ul>
     * </p>
     * @param timeStepSec The number of seconds since the last time \c kwlUpdate was called. 
     * @see kwlGetError
     */
    void kwlUpdate(float timeStepSec);
    
    /** 
     * <p>OpenGL style error flag interface. When an error occurs, the error code is set internally
     * and cleared (i.e set to KWL_NO_ERROR) when this method is called. If more than one error occurs before calling this
     * method, the code of the first error will be reported.</p>
     * @return The code of the first error, if any, that occurred since the previous call to \c kwlGetError. 
     */
    kwlError kwlGetError(void);
    
    /** @} */
    
#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /*KWL__KOWALSKI_H*/
