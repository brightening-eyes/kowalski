/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package kowalski;

public class Kowalski {
  public static int getKWL_INVALID_HANDLE() {
    return KowalskiJNI.KWL_INVALID_HANDLE_get();
  }

  public static int kwlEventGetHandle(String eventID) {
    return KowalskiJNI.kwlEventGetHandle(eventID);
  }

  public static int kwlEventDefinitionGetHandle(String eventDefinitionID) {
    return KowalskiJNI.kwlEventDefinitionGetHandle(eventDefinitionID);
  }

  public static int kwlEventCreateWithFile(String audioFilePath, kwlEventType eventType) {
    return KowalskiJNI.kwlEventCreateWithFile(audioFilePath, eventType.swigValue());
  }

  public static int kwlEventCreateWithBuffer(SWIGTYPE_p_short buffer, int numFrames, int numChannels, kwlEventType eventType) {
    return KowalskiJNI.kwlEventCreateWithBuffer(SWIGTYPE_p_short.getCPtr(buffer), numFrames, numChannels, eventType.swigValue());
  }

  public static void kwlEventRelease(int handle) {
    KowalskiJNI.kwlEventRelease(handle);
  }

  public static void kwlEventSetPitch(int handle, float pitch) {
    KowalskiJNI.kwlEventSetPitch(handle, pitch);
  }

  public static void kwlEventSetGain(int handle, float gain) {
    KowalskiJNI.kwlEventSetGain(handle, gain);
  }

  public static void kwlEventSetLinearGain(int handle, float gain) {
    KowalskiJNI.kwlEventSetLinearGain(handle, gain);
  }

  public static void kwlEventSetPosition(int handle, float posX, float posY, float posZ) {
    KowalskiJNI.kwlEventSetPosition(handle, posX, posY, posZ);
  }

  public static void kwlEventSetVelocity(int handle, float velX, float velY, float velZ) {
    KowalskiJNI.kwlEventSetVelocity(handle, velX, velY, velZ);
  }

  public static void kwlEventSetOrientation(int handle, float directionX, float directionY, float directionZ) {
    KowalskiJNI.kwlEventSetOrientation(handle, directionX, directionY, directionZ);
  }

  public static void kwlEventSetBalance(int handle, float balance) {
    KowalskiJNI.kwlEventSetBalance(handle, balance);
  }

  public static void kwlEventStart(int handle) {
    KowalskiJNI.kwlEventStart(handle);
  }

  public static void kwlEventStartOneShot(int handle) {
    KowalskiJNI.kwlEventStartOneShot(handle);
  }

  public static void kwlEventStartOneShotAt(int handle, float x, float y, float z) {
    KowalskiJNI.kwlEventStartOneShotAt(handle, x, y, z);
  }

  public static void kwlEventStartFade(int handle, float fadeTime) {
    KowalskiJNI.kwlEventStartFade(handle, fadeTime);
  }

  public static void kwlEventStop(int handle) {
    KowalskiJNI.kwlEventStop(handle);
  }

  public static void kwlEventStopFade(int handle, float fadeTime) {
    KowalskiJNI.kwlEventStopFade(handle, fadeTime);
  }

  public static void kwlEventPause(int handle) {
    KowalskiJNI.kwlEventPause(handle);
  }

  public static void kwlEventResume(int handle) {
    KowalskiJNI.kwlEventResume(handle);
  }

  public static int kwlEventIsPlaying(int handle) {
    return KowalskiJNI.kwlEventIsPlaying(handle);
  }

  public static int kwlMixBusGetHandle(String busID) {
    return KowalskiJNI.kwlMixBusGetHandle(busID);
  }

  public static void kwlMixBusSetPitch(int handle, float pitch) {
    KowalskiJNI.kwlMixBusSetPitch(handle, pitch);
  }

  public static void kwlMixBusSetGain(int handle, float gain) {
    KowalskiJNI.kwlMixBusSetGain(handle, gain);
  }

  public static void kwlMixBusSetLinearGain(int handle, float gain) {
    KowalskiJNI.kwlMixBusSetLinearGain(handle, gain);
  }

  public static int kwlMixPresetGetHandle(String presetId) {
    return KowalskiJNI.kwlMixPresetGetHandle(presetId);
  }

  public static void kwlMixPresetFadeTo(int presetHandle) {
    KowalskiJNI.kwlMixPresetFadeTo(presetHandle);
  }

  public static void kwlMixPresetSet(int presetHandle) {
    KowalskiJNI.kwlMixPresetSet(presetHandle);
  }

  public static void kwlListenerSetPosition(float posX, float posY, float posZ) {
    KowalskiJNI.kwlListenerSetPosition(posX, posY, posZ);
  }

  public static void kwlListenerSetVelocity(float velX, float velY, float velZ) {
    KowalskiJNI.kwlListenerSetVelocity(velX, velY, velZ);
  }

  public static void kwlListenerSetOrientation(float directionX, float directionY, float directionZ, float upX, float upY, float upZ) {
    KowalskiJNI.kwlListenerSetOrientation(directionX, directionY, directionZ, upX, upY, upZ);
  }

  public static void kwlSetDistanceAttenuationModel(kwlDistanceAttenuationModel type, int clamp, float maxDistance, float rolloffFactor, float referenceDistance) {
    KowalskiJNI.kwlSetDistanceAttenuationModel(type.swigValue(), clamp, maxDistance, rolloffFactor, referenceDistance);
  }

  public static void kwlSetDopplerShiftParameters(float speedOfSound, float dopplerScale) {
    KowalskiJNI.kwlSetDopplerShiftParameters(speedOfSound, dopplerScale);
  }

  public static void kwlSetConeAttenuationEnabled(int enableListenerCone, int enableEventCones) {
    KowalskiJNI.kwlSetConeAttenuationEnabled(enableListenerCone, enableEventCones);
  }

  public static void kwlSetListenerConeParameters(float innerConeAngle, float outerConeAngle, float outerConeGain) {
    KowalskiJNI.kwlSetListenerConeParameters(innerConeAngle, outerConeAngle, outerConeGain);
  }

  public static long kwlGetNumFramesMixed() {
    return KowalskiJNI.kwlGetNumFramesMixed();
  }

  public static int kwlWaveBankLoad(String fileName) {
    return KowalskiJNI.kwlWaveBankLoad(fileName);
  }

  public static void kwlWaveBankUnload(int handle) {
    KowalskiJNI.kwlWaveBankUnload(handle);
  }

  public static void kwlWaveBankUnloadBlocking(int handle) {
    KowalskiJNI.kwlWaveBankUnloadBlocking(handle);
  }

  public static int kwlWaveBankIsLoaded(int handle) {
    return KowalskiJNI.kwlWaveBankIsLoaded(handle);
  }

  public static int kwlIsEngineInitialized() {
    return KowalskiJNI.kwlIsEngineInitialized();
  }

  public static void kwlDeinitialize() {
    KowalskiJNI.kwlDeinitialize();
  }

  public static void kwlInitialize(int sampleRate, int numOutputChannels, int numInputChannels, int bufferSize) {
    KowalskiJNI.kwlInitialize(sampleRate, numOutputChannels, numInputChannels, bufferSize);
  }

  public static void kwlEngineDataLoad(String path) {
    KowalskiJNI.kwlEngineDataLoad(path);
  }

  public static void kwlEngineDataUnload() {
    KowalskiJNI.kwlEngineDataUnload();
  }

  public static int kwlEngineDataIsLoaded() {
    return KowalskiJNI.kwlEngineDataIsLoaded();
  }

  public static void kwlMixerResume() {
    KowalskiJNI.kwlMixerResume();
  }

  public static void kwlMixerPause() {
    KowalskiJNI.kwlMixerPause();
  }

  public static void kwlEnableLevelMetering() {
    KowalskiJNI.kwlEnableLevelMetering();
  }

  public static void kwlDisableLevelMetering() {
    KowalskiJNI.kwlDisableLevelMetering();
  }

  public static float kwlGetLevelLeft() {
    return KowalskiJNI.kwlGetLevelLeft();
  }

  public static float kwlGetLevelRight() {
    return KowalskiJNI.kwlGetLevelRight();
  }

  public static int kwlHasClipped() {
    return KowalskiJNI.kwlHasClipped();
  }

  public static void kwlUpdate(float timeStepSec) {
    KowalskiJNI.kwlUpdate(timeStepSec);
  }

  public static kwlError kwlGetError() {
    return kwlError.swigToEnum(KowalskiJNI.kwlGetError());
  }

}
